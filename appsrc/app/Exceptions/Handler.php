<?php

namespace App\Exceptions;

use App\Utils\CommunicationLogService;
use App\Utils\FriendlyException;
use Illuminate\Foundation\Exceptions\Handler as ExceptionHandler;
use Throwable;

class Handler extends ExceptionHandler
{
    /**
     * A list of the exception types that are not reported.
     *
     * @var array<int, class-string<Throwable>>
     */
    protected $dontReport = [
        FriendlyException::class,
    ];

    /**
     * A list of the inputs that are never flashed for validation exceptions.
     *
     * @var array<int, string>
     */
    protected $dontFlash = [
        'current_password',
        'password',
        'password_confirmation',
    ];

    /**
     * Register the exception handling callbacks for the application.
     *
     * @return void
     */
//    public function register()
//    {
//
//        $this->renderable(function (NotFoundHttpException $e, $request) {
//            if ($request->is('api/*')) {
//                return \response()->json([
//                    'message' => 'Record not found.'
//                ], 404);
//            }
//        });
//    }

    public function render($request, Throwable $e)
    {
        if ( $request->expectsJson()) {
            if ($e instanceof FriendlyException) {
                $request->header('Accept', 'application/json');
                $errors = $e->errors;
                $code = $e->statusCode;
                $message = $e->getMessage();
                return response()->json([
                    'error' => $code,
                    'message' => $message,
                    'errors' => $errors
                ]);
            }
            app(CommunicationLogService::class)->commit(
                [
                    'header' => [],
                    'content' => [
                        'error' => $e->getMessage()
                    ],
                ]
            );
        }

        return parent::render($request, $e); // TODO: Change the autogenerated stub
    }
}
